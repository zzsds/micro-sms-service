// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sms.proto

package sms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Sms service

type SmsService interface {
	SendList(ctx context.Context, in *SendPage, opts ...client.CallOption) (*SendPage, error)
	TemplateList(ctx context.Context, in *TemplatePage, opts ...client.CallOption) (*TemplatePage, error)
	Template(ctx context.Context, in *SmsStruct, opts ...client.CallOption) (*SmsStruct, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Create(ctx context.Context, in *CreateTempRequest, opts ...client.CallOption) (*CreateTempResponse, error)
}

type smsService struct {
	c    client.Client
	name string
}

func NewSmsService(name string, c client.Client) SmsService {
	return &smsService{
		c:    c,
		name: name,
	}
}

func (c *smsService) SendList(ctx context.Context, in *SendPage, opts ...client.CallOption) (*SendPage, error) {
	req := c.c.NewRequest(c.name, "Sms.SendList", in)
	out := new(SendPage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) TemplateList(ctx context.Context, in *TemplatePage, opts ...client.CallOption) (*TemplatePage, error) {
	req := c.c.NewRequest(c.name, "Sms.TemplateList", in)
	out := new(TemplatePage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) Template(ctx context.Context, in *SmsStruct, opts ...client.CallOption) (*SmsStruct, error) {
	req := c.c.NewRequest(c.name, "Sms.Template", in)
	out := new(SmsStruct)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Sms.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) Create(ctx context.Context, in *CreateTempRequest, opts ...client.CallOption) (*CreateTempResponse, error) {
	req := c.c.NewRequest(c.name, "Sms.Create", in)
	out := new(CreateTempResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sms service

type SmsHandler interface {
	SendList(context.Context, *SendPage, *SendPage) error
	TemplateList(context.Context, *TemplatePage, *TemplatePage) error
	Template(context.Context, *SmsStruct, *SmsStruct) error
	List(context.Context, *ListRequest, *ListResponse) error
	Create(context.Context, *CreateTempRequest, *CreateTempResponse) error
}

func RegisterSmsHandler(s server.Server, hdlr SmsHandler, opts ...server.HandlerOption) error {
	type sms interface {
		SendList(ctx context.Context, in *SendPage, out *SendPage) error
		TemplateList(ctx context.Context, in *TemplatePage, out *TemplatePage) error
		Template(ctx context.Context, in *SmsStruct, out *SmsStruct) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Create(ctx context.Context, in *CreateTempRequest, out *CreateTempResponse) error
	}
	type Sms struct {
		sms
	}
	h := &smsHandler{hdlr}
	return s.Handle(s.NewHandler(&Sms{h}, opts...))
}

type smsHandler struct {
	SmsHandler
}

func (h *smsHandler) SendList(ctx context.Context, in *SendPage, out *SendPage) error {
	return h.SmsHandler.SendList(ctx, in, out)
}

func (h *smsHandler) TemplateList(ctx context.Context, in *TemplatePage, out *TemplatePage) error {
	return h.SmsHandler.TemplateList(ctx, in, out)
}

func (h *smsHandler) Template(ctx context.Context, in *SmsStruct, out *SmsStruct) error {
	return h.SmsHandler.Template(ctx, in, out)
}

func (h *smsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.SmsHandler.List(ctx, in, out)
}

func (h *smsHandler) Create(ctx context.Context, in *CreateTempRequest, out *CreateTempResponse) error {
	return h.SmsHandler.Create(ctx, in, out)
}
