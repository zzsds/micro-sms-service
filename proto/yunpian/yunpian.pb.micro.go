// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: yunpian.proto

package yunpian

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Send service

type SendService interface {
	BizType(ctx context.Context, in *BizTypeResponse, opts ...client.CallOption) (*BizTypeResponse, error)
	Code(ctx context.Context, in *CodeResource, opts ...client.CallOption) (*CodeResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*ValidateResponse, error)
	Notice(ctx context.Context, in *EventResource, opts ...client.CallOption) (*EventResource, error)
}

type sendService struct {
	c    client.Client
	name string
}

func NewSendService(name string, c client.Client) SendService {
	return &sendService{
		c:    c,
		name: name,
	}
}

func (c *sendService) BizType(ctx context.Context, in *BizTypeResponse, opts ...client.CallOption) (*BizTypeResponse, error) {
	req := c.c.NewRequest(c.name, "Send.BizType", in)
	out := new(BizTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendService) Code(ctx context.Context, in *CodeResource, opts ...client.CallOption) (*CodeResponse, error) {
	req := c.c.NewRequest(c.name, "Send.Code", in)
	out := new(CodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendService) Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*ValidateResponse, error) {
	req := c.c.NewRequest(c.name, "Send.Validate", in)
	out := new(ValidateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendService) Notice(ctx context.Context, in *EventResource, opts ...client.CallOption) (*EventResource, error) {
	req := c.c.NewRequest(c.name, "Send.Notice", in)
	out := new(EventResource)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Send service

type SendHandler interface {
	BizType(context.Context, *BizTypeResponse, *BizTypeResponse) error
	Code(context.Context, *CodeResource, *CodeResponse) error
	Validate(context.Context, *ValidateRequest, *ValidateResponse) error
	Notice(context.Context, *EventResource, *EventResource) error
}

func RegisterSendHandler(s server.Server, hdlr SendHandler, opts ...server.HandlerOption) error {
	type send interface {
		BizType(ctx context.Context, in *BizTypeResponse, out *BizTypeResponse) error
		Code(ctx context.Context, in *CodeResource, out *CodeResponse) error
		Validate(ctx context.Context, in *ValidateRequest, out *ValidateResponse) error
		Notice(ctx context.Context, in *EventResource, out *EventResource) error
	}
	type Send struct {
		send
	}
	h := &sendHandler{hdlr}
	return s.Handle(s.NewHandler(&Send{h}, opts...))
}

type sendHandler struct {
	SendHandler
}

func (h *sendHandler) BizType(ctx context.Context, in *BizTypeResponse, out *BizTypeResponse) error {
	return h.SendHandler.BizType(ctx, in, out)
}

func (h *sendHandler) Code(ctx context.Context, in *CodeResource, out *CodeResponse) error {
	return h.SendHandler.Code(ctx, in, out)
}

func (h *sendHandler) Validate(ctx context.Context, in *ValidateRequest, out *ValidateResponse) error {
	return h.SendHandler.Validate(ctx, in, out)
}

func (h *sendHandler) Notice(ctx context.Context, in *EventResource, out *EventResource) error {
	return h.SendHandler.Notice(ctx, in, out)
}
